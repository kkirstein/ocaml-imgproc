(* vim: set ft=ocaml sw=2 ts=2: *)

(**
  Imgio module offers some basic image input/output functions
  for image data given as Owl's Ndarray.
  
  Author: kayuwe.kirstein
  
  *)

module type Io = sig
  type ary_type

  val image_to_ndarray :
    (int, Bigarray.int8_unsigned_elt) Bigarray.kind Stb_image.t ->
    (ary_type, [> `Invalid_dimension of int ]) result
  (** [image_to_ndarray img] converts an integer image buffer to
    a suitable Ndarray. The NDarray is arranged in [col; row] coordinates,
    compared to [x; y], often used in image processing.
    Returns [`Invalid_dimension n] error, if
    the dimensions don't match a 1 or 3 color channel image. *)

  val ndarray_to_image :
    ary_type ->
    ( (int, Bigarray.int8_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t,
      [> `Invalid_dimension of int ] )
    result
  (** [ndarray_to_image nd] converts a numeric array of image data to
    an integer image buffer. Returns [`Invalid_dimension n] error, if
    the dimensions don't match a 1 or 3 color channel image *)

  val save :
    ?fmt:[ `PNG ] ->
    string ->
    ary_type ->
    (unit, [> `Invalid_dimension of int ]) result
  (** [save ?fmt file_path img] writes given image data [img] to
    a file of format [fmt]. Returns [`Invalid_dimension n] error, if
    invalid dimensions are given. *)

  val load :
    string ->
    (ary_type, [> `IO_error of string | `Invalid_dimension of int ]) result
  (** [load file_path] reads the given image file [file_path] to
    a Ndarray. The NDarray is arranged in [col; row] coordinates,
    compared to [x; y], often used in image processing.
    Returns [`IO_error str] error, if the image file
    could not be read. *)
end

module S : Io with type ary_type := Owl.Dense.Ndarray.S.arr

module D : Io with type ary_type := Owl.Dense.Ndarray.D.arr

val print_img_info :
  ('a, 'b) Owl.Dense.Ndarray.Generic.t ->
  (unit, [> `Invalid_dimension of int ]) result
(** [print_img_info nd] prints some information like size and
    number of color channels to stdout. It returns [`Invalid_dimension n] error
    if [nd] has invaild dimensions [n] *)

val error_msg : [< `Invalid_dimension of int | `IO_error of string ] -> string
(** [error_msg err] generates a string representation of
    the different error generated by this module. *)

val to_grayscale :
  Owl.Dense.Ndarray.S.arr ->
  (Owl.Dense.Ndarray.S.arr, [> `Invalid_dimension of int ]) result
(** [to_grayscale nd] converts given image data to grayscale. It works for
    image data with 3 color channels and returns the original image, if a single
    color channel is given. Otherwise an [`Invalid_dimension n] error is returned. *)
